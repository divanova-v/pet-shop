<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Product;
use AppBundle\Entity\Promotion;
use AppBundle\Entity\SaleOffer;
use AppBundle\Entity\User;

/**
 * PromotionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PromotionRepository extends \Doctrine\ORM\EntityRepository
{

    public function getMaxPromotionByOfferAndUser(SaleOffer $saleOffer, User $user = null)
    {
        $now = new \DateTime();

        $qb = $this->createQueryBuilder('p');
        $qb
            ->select(['p', 'p2so', 'p2c', 'p2u'])
            ->leftJoin('p.saleOffers', 'p2so')
            ->leftJoin('p.categories', 'p2c')
            ->leftJoin('p.users', 'p2u')
            ->where($qb->expr()->lte('p.startDate', ':now' ))
            ->andWhere($qb->expr()->gte('p.endDate', ':now' ))
            ->andWhere(
               $qb->expr()->orX(
                   $qb->expr()->eq('p.isGeneral', '1'),
                   $qb->expr()->eq('p2so.id', ':productId'),
                   $qb->expr()->eq('p2c.id', ':categoryId'),
                   $qb->expr()->eq('p2u.id', ':userId')
               )
            )
            ->setParameters([
                'now' => $now->format('Y-m-d h:i:s'),
                'productId' => $saleOffer->getId(),
                'categoryId' => $saleOffer->getProduct()->getCategory()->getId(),
                'userId' => (!empty($user) ? $user->getId() : null),
            ])
            ->setMaxResults(1)
            ->orderBy('p.percent', 'DESC');

        $query= $qb->getQuery();
        return $query->getOneOrNullResult();
    }

    /**
     * get active promotions
     * @return array
     */
    public function getActivePromotions()
    {
        $now = new \DateTime();
        $qb = $this->createQueryBuilder('p');
        $query = $qb->where($qb->expr()->lte('p.startDate', ':now' ))
            ->andWhere($qb->expr()->gte('p.endDate', ':now' ))
            ->setParameters([
                'now' => $now->format('Y-m-d h:i:s'),
            ])
            ->orderBy('p.endDate', 'ASC')
            ->getQuery();
        return $query->getResult();
    }
}
