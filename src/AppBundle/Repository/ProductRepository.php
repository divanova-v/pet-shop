<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Product;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $id int
     * @return Product|null
     */
    public function getShopProductAndOfferByProductId($id)
    {
        $query = $this
            ->createQueryBuilder('p')
            ->select(['p', 'so'])
            ->leftJoin('p.saleOffers',
                'so',
                'WITH',
                'so.userId IS NULL')
            ->where('p.id = :id')
            ->orderBy('p.createdOn', 'DESC')
            ->setParameters([
                'id' => $id
            ])
            ->getQuery();
        /**
         * @var $product Product
         */
        return $query->getOneOrNullResult();
    }

    /**
     * @return array
     */
    public function getShopProductsAndOffers(){
        $query = $this
            ->createQueryBuilder('p')
            ->select(['p', 'so'])
            ->leftJoin('p.saleOffers',
                'so',
                'WITH',
                'so.userId IS NULL')
            ->orderBy('p.createdOn', 'DESC')
            ->getQuery();
        /**
         * @var $products Product[]
         */
        return $query->getResult();
    }

    public function countSaleOffersByProductId($product)
    {
        $query = $this->createQueryBuilder('p')
            ->select('count(so.id) as countSaleOffers')
            ->join('p.saleOffers', 'so')
            ->where('so.product = :product')
            ->setParameters([
                'product' => $product
            ])
            ->getQuery();

        return $query->getSingleScalarResult();
    }

    /**
     * @param $userId integer
     */
    public function getUsersProductsByUserId($userId)
    {
        $qb = $this->createQueryBuilder('p')
        ->join('p.sales',
            'sp',
            'WITH',
            'sp.userId = :id')
        ->orderBy('p.createdOn', 'DESC')
        ->setParameters(['id' => $userId]);
        return $qb;
    }

}
